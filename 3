#include <iostream>
#include<stdio.h>
#include<string.h>
using namespace std;

char token[12];//读取字符缓冲
char buffer[100];//输入行缓冲
int token_num;//字符缓冲指针
int b_end;//输入缓冲结束指针
char ch;//读入的单个字符
int row_num=1;//行数
bool r_empty=true;//判断是否为空行
bool isNotes = false;//判断是否为注释
bool isback = false;//是否退格
char ch_temp;//临时字符替换
int errorlines[500];
int error_num = 0;
bool isnewline = true;
string line[500];

//初始化字符缓冲
void init_token()
{
    int i;
    for(i=0;i<12;i++)
    {
        token[i] = NULL;
    }
}



//遇到诸如“<="等需要超前读取一个字符的，若识别不成功需要退格
void back()
{
    isback = true;
    ch_temp = ch;
}


//识别是否为关键字,若为关键字则在输出组里添加信息
void IsKeyWord()
{
    if (strcmp(token, "void") == 0)
    {
        //cout << "<3,->,";
        line[row_num] = line[row_num] + "<3,->,";

    }
    else if (strcmp(token, "int") == 0)
    {
        //cout << "<4,->,";
        line[row_num] = line[row_num] + "<" + "4" + "," + "-" + ">" + ",";

    }
    else if (strcmp(token, "float") == 0)
    {
        //cout << "<5,->,";
        line[row_num] = line[row_num] + "<" + "5" + "," + "-" + ">" + ",";

    }
    else if (strcmp(token, "char") == 0)
    {
        //cout << "<6,->,";
        line[row_num] = line[row_num] + "<" + "6" + "," + "-" + ">" + ",";

    }
    else if (strcmp(token, "if") == 0)
    {
        //cout << "<7,->,";
        line[row_num] = line[row_num] + "<" + "7" + "," + "-" + ">" + ",";

    }
    else if (strcmp(token, "else") == 0)
    {
        //cout << "<8,->,";
        line[row_num] = line[row_num] + "<" + "8" + "," + "-" + ">" + ",";

    }
    else if (strcmp(token, "while") == 0)
    {
        //cout << "<9,->,";
        line[row_num] = line[row_num] + "<" + "9" + "," + "-" + ">" + ",";

    }
    else if (strcmp(token, "do") == 0)
    {
        //cout << "<10,->,";
        line[row_num] = line[row_num] + "<" + "10" + "," + "-" + ">" + ",";

    }
    else if (strcmp(token, "for") == 0)
    {
        //cout << "<11,->,";
        line[row_num] = line[row_num] + "<" + "11" + "," + "-" + ">" + ",";

    }
    else if (strcmp(token, "return") == 0)
    {
        //cout << "<11,->,";
        line[row_num] = line[row_num] + "<" + "12" + "," + "-" + ">" + ",";

    }
    else if (strcmp(token, "main") == 0)
    {
        //cout << "<11,->,";
        line[row_num] = line[row_num] + "<" + "13" + "," + "-" + ">" + ",";

    }
    //不为关键字则为标识符
    else
    {
        line[row_num] = line[row_num] + "<" + "1" + "," + token + ">" + ",";

    }
}

//跳过空白
void JumpBlack()
{
    while (ch == ' ' || ch == '\n' || ch == '\t')
    {
        //读到换行符输出换行
        if (r_empty != true && ch == '\n')
        {
            cout << endl;
            row_num++; 
            r_empty = true;
        }
        ch = cin.get();
    }
}



//字符识别
int Distinguish_token()
{
    init_token();
    if (isback == true)
    {
        ch = ch_temp;
        isback = false;
    }
    else ch = cin.get();
    //跳过空格、换行和换字
    JumpBlack();
    token_num = 0;
    if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))
    {
        r_empty = false;
        while ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))
        {
            token[token_num++] = ch;
            ch = cin.get();
        }

        token[token_num++] = '\0';
        
        //检查是否为关键字或标识符
        IsKeyWord();
        
        if (ch == '\n')
        {
            row_num++;
            r_empty = true;
            //cout << row_num << endl;
        }
        else
        {
            back();
        }
        return 0;
    }
    //识别是否为数字，若遇上数字+整数则报错
    else if(ch >= '0' && ch < '9')
    {
        r_empty = false;
        while (ch >= '0' && ch < '9')
        {
            token[token_num++] = ch;
            ch = cin.get();
        }
        if (ch == '\n')
        {
            line[row_num] = line[row_num] + "<2," + token + ">,";
            row_num++;
            r_empty = true;
        }
        else if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))
        {
            while ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch < '9'))
            {
                ch = cin.get();
            }
            line[row_num] = line[row_num] + "LexicalError,";
            if (ch == '\n')
            {
                row_num++;
                r_empty = true;
                //cout << "错误"<<row_num - 1 << endl;
                return row_num-1;
            }
            else
            {
                back();
            }
            //cout << "错误" << row_num  << endl;
            return row_num;

        }
        else
        {
            line[row_num] = line[row_num] + "<2," + token + ">,";
            back();
        }

        return 0;
    }
    //识别是否为单词符号，遇到”#“返回-1表示结束
    else
    {
        r_empty = false;
        token[token_num++] = ch;
        switch (ch)
        {
        case '+':line[row_num] = line[row_num] + "<14,->,"; break;
        case '-':line[row_num] = line[row_num] + "<15,->,"; break;
        case '*':line[row_num] = line[row_num] + "<16,->,"; break;
        case '/':
            ch = cin.get();
            //消除注释
            if(ch=='/')
            {
                while (ch != '\n')
                {
                    ch = cin.get();
                }

                //row_num++;
                //r_empty = true;
            }
            else if (ch == '*')
            {
                ch = cin.get();
                if (ch == '/')ch = cin.get();
                else
                {
                    while (ch != '/')
                    {
                        while (ch != '*')
                        {
                            ch = cin.get();
                        }
                        ch = cin.get();
                    }
                }
            }
            else line[row_num] = line[row_num] + "<17,->,";
            break;
        case '%':line[row_num] = line[row_num] + "<18,->,"; break;
        case '<':
            ch = cin.get();
            if (ch == '=')
            {
                line[row_num] = line[row_num] + "<20,->,";
                
            }
            else if (ch == ' ')
            {
                line[row_num] = line[row_num] + "<19,->,";
            }
            else if (ch == '\n')
            {
                line[row_num] = line[row_num] + "<19,->,";
                row_num++;
                r_empty = true;
            }
            else
            {
                line[row_num] = line[row_num] + "<19,->,";
                back();
                //cout << ch_temp << endl;
            }
            ; break;
        case '>':
            ch = cin.get();
            if (ch == '=')
            {
                line[row_num] = line[row_num] + "<22,->,";
             
            }
            else if (ch == ' ')
            {
                line[row_num] = line[row_num] + "<21,->,";
            }
            else if (ch == '\n')
            {
                line[row_num] = line[row_num] + "<21,->,";
                row_num++;
                r_empty = true;
            }
            else
            {
                line[row_num] = line[row_num] + "<21,->,";
                back();
            }
            ; break;
        case '=':
            ch = cin.get();
            if (ch == '=')
            {
                line[row_num] = line[row_num] + "<23,->,";
                
            }
            else if (ch == ' ')
            {
                line[row_num] = line[row_num] + "<27,->,";
            }
            else if (ch == '\n')
            {
                line[row_num] = line[row_num] + "<27,->,";
                row_num++;
                r_empty = true;
            }
            else
            {
                line[row_num] = line[row_num] + "<27,->,";
                back();
            }
            ; break;
        case '!':
            ch = cin.get();
            if (ch == '=')
            {
                line[row_num] = line[row_num] + "<24,->,";
                
            }
            else
            {
                line[row_num] = line[row_num] + "LexicalError,";
                while ((ch != ' ') &&(ch != '\n') && (ch != '\t'))
                {
                    ch = cin.get();
                }
                if (ch == '\n')
                {
                    row_num++;
                    r_empty = true;
                    return row_num - 1;
                }
                else
                {
                    line[row_num] = line[row_num] + "<19,->,";
                    back();
                }
            }; break;
        case '&':
            ch = cin.get();
            if (ch == '&')
            {
                line[row_num] = line[row_num] + "<25,->,";
                
            }
            else
            {
                line[row_num] = line[row_num] + "LexicalError,";
                while ((ch != ' ') && (ch != '\n') && (ch != '\t'))
                {
                    ch = cin.get();
                }
                if (ch == '\n')
                {
                    row_num++;
                    r_empty = true;
                    return row_num - 1;
                }
                else
                {
                    line[row_num] = line[row_num] + "<19,->,";
                    back();
                }
            }; break;
        case '|':
            ch = cin.get();
            if (ch == '|')
            {
                line[row_num] = line[row_num] + "<26,->,";
                
            }
            else
            {
                line[row_num] = line[row_num] + "LexicalError,";
                while ((ch != ' ') && (ch != '\n') && (ch != '\t'))
                {
                    ch = cin.get();
                }
                if (ch == '\n')
                {
                    row_num++;
                    r_empty = true;
                    return row_num - 1;
                }
                else
                {
                    line[row_num] = line[row_num] + "<19,->,";
                    back();
                }
            }; break;
        case '(':line[row_num] = line[row_num] + "<28,->,"; break;
        case ')':line[row_num] = line[row_num] + "<29,->,"; break;
        case '[':line[row_num] = line[row_num] + "<30,->,"; break;
        case ']':line[row_num] = line[row_num] + "<31,->,"; break;
        case '{':line[row_num] = line[row_num] + "<32,->,"; break;
        case '}':line[row_num] = line[row_num] + "<33,->,"; break;
        case ';':line[row_num] = line[row_num] + "<34,->,"; break;
        case ',':line[row_num] = line[row_num] + "<35,->,"; break;
        case '#':
            return -1; break;
        default:
            break;
        }
        if (ch == '\n')
        {
            row_num++;
            r_empty = true;
        }
        return 0;
    }
}

//初始化错误行数存储区
void init_line()
{
    int i = 0;
    for (; i < 100; i++)
    {
        line[i][0] = NULL;
    }
}

//记录错误行数
void NoteErrorRow(int temp)
{
    int i = 0;
    for (; i < error_num; i++)
    {
        if (temp == errorlines[i])
        {
            isnewline = false; break;
        }
        else isnewline = true;
    }
    if (isnewline == true)
    {

        errorlines[error_num] = temp;
        error_num++;
    }
}

//输出分析结果
void Output()
{
    int j = 1;
    for (; j <= row_num; j++)
    {

        //if(strcmp(line[j],"")!=0)
        if (line[j][0] == '<' || line[j][0] == 'L')
        {
            cout << line[j];
            cout << endl;
        }//cout << line[j][0] << endl;
    }
}

//输出错误行数
void ErrorOutput()
{
    if (error_num > 0)
    {
        cout << "LexicalError(s) on line(s) ";
        //cout << error_num << endl;
        for (int i = 0; i < error_num; i++)
        {
            cout << errorlines[i] << ",";
        }
    }
}

int main()
{
    int temp;
    init_line();
    while ((temp=Distinguish_token())!=-1)
    {
        //cout << "jiancha"  <<" "<<temp << endl;
        if (temp > 0)
        {
            //cout << temp << "jiancha" << endl;
            NoteErrorRow(temp);
        }
    }
    Output();
    ErrorOutput();
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧:
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
